bindkey -e
setopt autocd # 自动进入文件夹——no cd
# setopt correctall # 自动纠正

# history
HISTFILE=~/.zhistory
HISTSIZE=3000
SAVEHIST=3000
setopt hist_ignore_all_dups # 不记录重复
setopt hist_ignore_space # 空格开头不记录

## Colors
LS_COLORS='rs=0:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:tw=30;42:ow=34;42:st=37;44:ex=01;32:'
export LS_COLORS
autoload -U colors zsh/terminfo && colors

## completion
autoload -Uz compinit promptinit && compinit
promptinit; prompt gentoo
zstyle :compinstall filename '/home/kasura/.zshrc'
zstyle ':completion:*' menu select
# zstyle ':completion::complete:*' gain-privileges 1 # sudo下自动补全
zstyle ':completion:*' matcher-list 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' # 智能大小写
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS} # 补全的颜色
# 扩展删除单词(C-W)的边界
WORDCHARS=${WORDCHARS/\/}
# WORDCHARS=${WORDCHARS//[\/-]}

## Key bindings
# 声明了一个全局关联数组key，用于保存特殊按键与对应的terminfo能力
typeset -g -A key 
key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Backspace]="${terminfo[kbs]}"
key[Delete]="${terminfo[kdch1]}"
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Left]="${terminfo[kcub1]}"
key[Right]="${terminfo[kcuf1]}"
key[PageUp]="${terminfo[kpp]}"
key[PageDown]="${terminfo[knp]}"
key[Shift-Tab]="${terminfo[kcbt]}"
# bindkey命令绑定特定按键与相应的命令或函数
[[ -n "${key[Home]}"      ]] && bindkey -- "${key[Home]}"       beginning-of-line
[[ -n "${key[End]}"       ]] && bindkey -- "${key[End]}"        end-of-line
[[ -n "${key[Insert]}"    ]] && bindkey -- "${key[Insert]}"     overwrite-mode
[[ -n "${key[Backspace]}" ]] && bindkey -- "${key[Backspace]}"  backward-delete-char
[[ -n "${key[Delete]}"    ]] && bindkey -- "${key[Delete]}"     delete-char
[[ -n "${key[Up]}"        ]] && bindkey -- "${key[Up]}"         up-line-or-history
[[ -n "${key[Down]}"      ]] && bindkey -- "${key[Down]}"       down-line-or-history
[[ -n "${key[Left]}"      ]] && bindkey -- "${key[Left]}"       backward-char
[[ -n "${key[Right]}"     ]] && bindkey -- "${key[Right]}"      forward-char
[[ -n "${key[PageUp]}"    ]] && bindkey -- "${key[PageUp]}"     beginning-of-buffer-or-history
[[ -n "${key[PageDown]}"  ]] && bindkey -- "${key[PageDown]}"   end-of-buffer-or-history
[[ -n "${key[Shift-Tab]}" ]] && bindkey -- "${key[Shift-Tab]}"  reverse-menu-complete
# Finally, make sure the terminal is in application mode, when zle is active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
	autoload -Uz add-zle-hook-widget
	function zle_application_mode_start { echoti smkx }
	function zle_application_mode_stop { echoti rmkx }
	add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
	add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi
# Ctrl + left/right to the word l/r
key[Control-Left]="${terminfo[kLFT5]}"
key[Control-Right]="${terminfo[kRIT5]}"
[[ -n "${key[Control-Left]}"  ]] && bindkey -- "${key[Control-Left]}"  backward-word
[[ -n "${key[Control-Right]}" ]] && bindkey -- "${key[Control-Right]}" forward-word

## History search
autoload -Uz up-line-or-beginning-search down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
[[ -n "${key[Up]}"   ]] && bindkey -- "${key[Up]}"   up-line-or-beginning-search
[[ -n "${key[Down]}" ]] && bindkey -- "${key[Down]}" down-line-or-beginning-search

## alias
alias ls="ls --color -F"
alias ll="ls --color -lh"
alias la="ls --color -lah"
alias gz="tar -zxvf"
alias pc="proxychains"
alias ga="git add"
alias gaa="git add --all"
alias gd="git diff"
alias gf="git fetch"
alias gp="git push"
alias gs="git status"
alias gc="git commit -m"
alias gco="git checkout"
alias vim=nvim
alias py=python
alias ssh="kitty +kitten ssh"
alias tlmgr='/usr/share/texmf-dist/scripts/texlive/tlmgr.pl --usermode'
alias nvrun='__NV_PRIME_RENDER_OFFLOAD=1 __VK_LAYER_NV_optimus=NVIDIA_only __GLX_VENDOR_LIBRARY_NAME=nvidia "$@"'

## Others
# 使用 ranger 时，Q 退出时进入最后的工作目录
function ra {
  local IFS=$'\t\n'
  local tempfile="$(mktemp -t tmp.XXXXXX)"
  local ranger_cmd=(command ranger --cmd="map Q chain shell echo %d > \"$tempfile\"; quitall")
  ${ranger_cmd[@]} "$@"
  if [[ -f "$tempfile" ]] && [[ "$(cat -- "$tempfile")" != "$PWD" ]]; then
    cd -- "$(cat -- "$tempfile")" || return
  fi
  command rm -f -- "$tempfile" 2>/dev/null
}
# 当前文件夹下是否存在requirement.txt文件，如果有就检测虚拟环境，如果也有就自动进入虚拟环境
function chpwd() {
  VENV_PATH=$HOME"/.pyvenv/"
  if [[ -f "requirements.txt" ]]; then
    VENV_DIR=$VENV_PATH$(basename $PWD)
    if [[ -d "$VENV_DIR" ]]; then
      echo "Activating virtual environment..."
      source $VENV_DIR"/bin/activate"
    else
      echo "Use mkvenv-py to make virtual environment"
      alias mkvenv-py="python -m venv $VENV_DIR"
      alias cdvenv-py="source $VENV_DIR/bin/activate"
      alias rmvenv-py="rm -rf $VENV_DIR"
    fi
  else
    if [ "$VIRTUAL_ENV" ]; then
      deactivate
    fi
    if alias mkvenv-py >/dev/null 2>&1; then
      unalias mkvenv-py rmvenv-py cdvenv-py
    fi
  fi
}

## Plugins
source /usr/share/zsh/site-functions/zsh-autosuggestions.zsh
source /usr/share/zsh/site-functions/zsh-syntax-highlighting.zsh
source /usr/share/zsh/site-functions/powerlevel10k/powerlevel10k.zsh-theme

[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
